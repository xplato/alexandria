{"version":3,"file":"index.js","sources":["../src/context.ts","../src/storage.ts","../src/errors.ts","../src/logic.ts","../src/AlexandriaProvider.tsx","../src/useAlexandria.ts","../src/create.tsx"],"sourcesContent":["import { createContext } from \"react\"\n\nimport { TAlexandriaContext } from \"types\"\n\nexport const AlexandriaContext = createContext<TAlexandriaContext>({} as never)\n","export const isServer = typeof window === \"undefined\"\n\nexport const saveObject = <T>(key: string, value: T): void => {\n\tif (isServer) return\n\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n}\n\nexport const getBlob = (key: string): string | undefined => {\n\tif (isServer) return undefined\n\n\tlet blob\n\n\ttry {\n\t\tblob = localStorage.getItem(key) || undefined\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n\n\treturn blob || undefined\n}\n\nexport const getSavedObject = <T>(key: string, fallback: T): T => {\n\tconst blob = getBlob(key)\n\n\tif (typeof blob === \"undefined\") {\n\t\tsaveObject(key, fallback)\n\t\treturn fallback\n\t}\n\n\tlet value: T = fallback\n\n\ttry {\n\t\tvalue = JSON.parse(blob) as T\n\t} catch (e) {\n\t\t// Invalid\n\t\tsaveObject(key, \"{}\")\n\t}\n\n\treturn value\n}\n","import { Schema } from \"types\"\n\nconst PREFIX = \"Alexandria: \"\n\nexport const errors = {\n\tunknownSetting: (key: string): string =>\n\t\t`UNKNOWN_SETTING_ERROR: \"${key}\" is not a valid setting. If it should be, please update your schema in the AlexandriaProvider. Your mutation has been ignored and the setting was not changed.`,\n\tinvalidSettingValue: (key: string, value: string, schema: Schema): string =>\n\t\t`INVALID_SETTING_VALUE_ERROR: \"${value}\" is not an allowed value for setting \"${key}\". Your mutation has been ignored and the setting was not changed. The current allowed values are: ${schema[key].allow}. If you want to allow any value, set the \"allow\" property to \"*\".`,\n\tinvalidSchema: (schema: unknown): string =>\n\t\t`INVALID_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is invalid. Got: \"${schema}\"`,\n}\n\nexport const alexandriaError = (key: string, ...args: any[]) => {\n\tconst error = errors[key]\n\n\tif (typeof error === \"undefined\") {\n\t\tthrow new Error(`UNKNOWN_ERROR: ${key}`)\n\t}\n\n\treturn new Error(`${PREFIX}${error(...args)}`)\n}\n","import { alexandriaError } from \"errors\"\nimport { Schema, SettingValue, UnknownSettings } from \"types\"\n\nexport const isAllowedValue = (\n\tkey: string,\n\tvalue: SettingValue,\n\tschema: Schema\n): boolean => {\n\tconst setting = schema[key]\n\n\tif (\n\t\ttypeof setting === \"undefined\" ||\n\t\t(typeof setting.allow === \"undefined\" &&\n\t\t\ttypeof setting.validate === \"undefined\")\n\t) {\n\t\treturn false\n\t}\n\n\tif (!setting) return false\n\tif (setting.allow === \"*\") return true\n\n\tif (typeof setting.validate === \"function\") {\n\t\tconst valid = setting.validate(value)\n\t\tif (valid) return true\n\t\treturn false\n\t}\n\n\tif (typeof setting.allow === \"undefined\") return false\n\treturn setting.allow.includes(value as never)\n}\n\nexport const compileDefaultSettingsFromSchema = (\n\tschema: Schema\n): UnknownSettings => {\n\tlet settings: Partial<UnknownSettings> = {}\n\n\tif (typeof schema !== \"object\") {\n\t\tthrow alexandriaError(\"invalidSchema\", schema)\n\t}\n\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tsettings[key] = value.default\n\t}\n\n\treturn settings as UnknownSettings // Caller is responsible for providing defaults\n}\n","import React, { useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { getSavedObject } from \"storage\"\nimport { compileDefaultSettingsFromSchema } from \"logic\"\n\nimport type { Config, Schema, UnknownSettings } from \"types\"\n\nconst defaultConfig: Config = {\n\tkey: \"alexandria\",\n}\n\ninterface Props {\n\tschema: Schema\n\tconfig?: Config\n\tchildren: React.ReactNode\n}\n\nexport const AlexandriaProvider = <T extends UnknownSettings = UnknownSettings>({\n\tschema,\n\tconfig: userConfig,\n\tchildren,\n}: Props) => {\n\tconst config: Config = {\n\t\t...defaultConfig,\n\t\t...userConfig,\n\t}\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(schema) as T\n\n\tconst loadSettings = (): T => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tconst [settings, setSettings] = useState<T>(() => {\n\t\treturn {\n\t\t\t...defaultSettings,\n\t\t\t...loadSettings(),\n\t\t}\n\t})\n\n\treturn (\n\t\t<AlexandriaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tsettings,\n\t\t\t\tsetSettings,\n\t\t\t\tschema,\n\t\t\t\tconfig,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AlexandriaContext.Provider>\n\t)\n}\n","import { useContext, useEffect, useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { compileDefaultSettingsFromSchema, isAllowedValue } from \"logic\"\nimport { getSavedObject, saveObject } from \"storage\"\nimport { alexandriaError } from \"errors\"\n\nimport { AlexandriaOperatingContext, UnknownSettings } from \"types\"\n\nexport const useAlexandria = <\n\tT extends UnknownSettings = UnknownSettings\n>(): AlexandriaOperatingContext & T => {\n\tconst { settings, setSettings, schema, config } =\n\t\tuseContext(AlexandriaContext)\n\n\ttype KnownSettings = typeof settings\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(schema)\n\n\tconst [isServer, setIsServer] = useState(true)\n\n\tconst knownSettings = Object.keys(\n\t\tdefaultSettings\n\t) as (keyof KnownSettings)[]\n\tconst isKnownSetting = (key: keyof KnownSettings): boolean =>\n\t\tknownSettings.includes(key)\n\n\tconst validateSettings = (\n\t\tsettingsToValidate: KnownSettings\n\t): KnownSettings => {\n\t\tlet newSettings: Partial<KnownSettings> = {}\n\n\t\tfor (const [key, value] of Object.entries(settingsToValidate)) {\n\t\t\tconst known = isKnownSetting(key)\n\t\t\tconst allowed = isAllowedValue(key, value, schema)\n\n\t\t\tif (known) {\n\t\t\t\tif (allowed) {\n\t\t\t\t\tnewSettings[key] = value as never\n\t\t\t\t} else {\n\t\t\t\t\tnewSettings[key] = settings[key]\n\t\t\t\t\tthrow alexandriaError(\n\t\t\t\t\t\t\"invalidSettingValue\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tschema\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSettings as KnownSettings\n\t}\n\n\tconst setWithValidation = (\n\t\tcb: (settings: KnownSettings) => KnownSettings\n\t) => {\n\t\tsetSettings(settings => validateSettings(cb(settings)))\n\t}\n\n\tconst loadSettings = () => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!window.localStorage) return\n\n\t\tsetIsServer(false)\n\t\tconst savedSettings = loadSettings()\n\n\t\tif (Object.keys(savedSettings).length === 0) {\n\t\t\tsetSettings(defaultSettings)\n\t\t}\n\n\t\tsetSettings(validateSettings(savedSettings))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (JSON.stringify(loadSettings()) !== JSON.stringify(settings)) {\n\t\t\tsaveObject(config.key, settings)\n\t\t}\n\t}, [settings])\n\n\t//////////\n\n\tconst throwIfUnknownSetting = (key: keyof KnownSettings) => {\n\t\tif (!isKnownSetting(key)) {\n\t\t\tthrow alexandriaError(\"unknownSetting\", key)\n\t\t}\n\t}\n\n\t//////////\n\n\tconst cycleBetween = (key: keyof KnownSettings, values: string[]) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tconst index = values.indexOf(settings[key] as string)\n\t\tconst nextIndex = index === values.length - 1 ? 0 : index + 1\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: values[nextIndex],\n\t\t}))\n\t}\n\n\tconst reset = (key?: keyof KnownSettings) => {\n\t\tif (typeof key === \"undefined\") {\n\t\t\tsetSettings(_ => defaultSettings)\n\t\t\treturn\n\t\t}\n\n\t\tthrowIfUnknownSetting(key)\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: defaultSettings[key],\n\t\t}))\n\t}\n\n\tconst set = (key: keyof KnownSettings, value: any) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tif (settings[key] === value) return\n\t\tsetSettings(settings => validateSettings({ ...settings, [key]: value }))\n\t}\n\n\tconst toggle = (key: keyof KnownSettings) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: !settings[key],\n\t\t}))\n\t}\n\n\tconst toggleBetween = (\n\t\tkey: keyof KnownSettings,\n\t\tvalues: [string, string]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: settings[key] === values[0] ? values[1] : values[0],\n\t\t}))\n\t}\n\n\tconst operatingContext: AlexandriaOperatingContext = {\n\t\tready: !isServer,\n\t\tcycleBetween,\n\t\treset,\n\t\tset,\n\t\ttoggle,\n\t\ttoggleBetween,\n\t}\n\n\tconst alexandria: AlexandriaOperatingContext & KnownSettings = {\n\t\t...settings,\n\t\t...operatingContext,\n\t}\n\n\t// @ts-ignore\n\treturn alexandria\n}\n","import React from \"react\"\n\nimport { AlexandriaProvider } from \"AlexandriaProvider\"\n\nimport {\n\tAlexandriaCreationContext,\n\tAlexandriaOperatingContext,\n\tSchema,\n\tUnknownSettings,\n} from \"types\"\nimport { useAlexandria } from \"useAlexandria\"\n\nexport const createAlexandria = <KnownSettings extends UnknownSettings>(\n\tschema: Schema\n): AlexandriaCreationContext<KnownSettings> => {\n\ttype Alexandria = AlexandriaOperatingContext & KnownSettings\n\n\tconst Provider = ({ children }: { children: React.ReactNode }) => (\n\t\t<AlexandriaProvider<KnownSettings> schema={schema}>\n\t\t\t{children}\n\t\t</AlexandriaProvider>\n\t)\n\n\tconst Consumer = (): Alexandria => {\n\t\treturn useAlexandria<KnownSettings>()\n\t}\n\n\treturn {\n\t\tProvider,\n\t\tConsumer,\n\t}\n}\n"],"names":["AlexandriaContext","createContext","isServer","window","saveObject","key","value","localStorage","setItem","JSON","stringify","e","getBlob","undefined","blob","getItem","getSavedObject","fallback","parse","PREFIX","errors","unknownSetting","invalidSettingValue","schema","allow","invalidSchema","alexandriaError","error","Error","args","isAllowedValue","setting","validate","valid","includes","compileDefaultSettingsFromSchema","settings","Object","entries","defaultConfig","AlexandriaProvider","userConfig","config","children","defaultSettings","loadSettings","useState","setSettings","React","Provider","useAlexandria","useContext","setIsServer","knownSettings","keys","isKnownSetting","validateSettings","settingsToValidate","newSettings","known","allowed","setWithValidation","cb","useEffect","savedSettings","length","throwIfUnknownSetting","cycleBetween","values","index","indexOf","nextIndex","reset","_","set","toggle","toggleBetween","operatingContext","ready","alexandria","createAlexandria","Consumer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAIaA,iBAAiB,GAAGC,mBAAa,CAAqB,EAArB;;ACJvC,IAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AAEP,AAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAIC,GAAJ,EAAiBC,KAAjB;AACzB,MAAIJ,QAAJ,EAAc;;AAEd,MAAI;AACHK,IAAAA,YAAY,CAACC,OAAb,CAAqBH,GAArB,EAA0BI,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAA1B;AACA,GAFD,CAEE,OAAOK,CAAP,EAAU;AAGZ,CARM;AAUP,AAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACP,GAAD;AACtB,MAAIH,QAAJ,EAAc,OAAOW,SAAP;AAEd,MAAIC,IAAJ;;AAEA,MAAI;AACHA,IAAAA,IAAI,GAAGP,YAAY,CAACQ,OAAb,CAAqBV,GAArB,KAA6BQ,SAApC;AACA,GAFD,CAEE,OAAOF,CAAP,EAAU;;AAIZ,SAAOG,IAAI,IAAID,SAAf;AACA,CAZM;AAcP,AAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAIX,GAAJ,EAAiBY,QAAjB;AAC7B,MAAMH,IAAI,GAAGF,OAAO,CAACP,GAAD,CAApB;;AAEA,MAAI,OAAOS,IAAP,KAAgB,WAApB,EAAiC;AAChCV,IAAAA,UAAU,CAACC,GAAD,EAAMY,QAAN,CAAV;AACA,WAAOA,QAAP;AACA;;AAED,MAAIX,KAAK,GAAMW,QAAf;;AAEA,MAAI;AACHX,IAAAA,KAAK,GAAGG,IAAI,CAACS,KAAL,CAAWJ,IAAX,CAAR;AACA,GAFD,CAEE,OAAOH,CAAP,EAAU;AAEXP,IAAAA,UAAU,CAACC,GAAD,EAAM,IAAN,CAAV;AACA;;AAED,SAAOC,KAAP;AACA,CAlBM;;ACxBP,IAAMa,MAAM,GAAG,cAAf;AAEA,AAAO,IAAMC,MAAM,GAAG;AACrBC,EAAAA,cAAc,EAAE,wBAAChB,GAAD;AAAA,yCACYA,GADZ;AAAA,GADK;AAGrBiB,EAAAA,mBAAmB,EAAE,6BAACjB,GAAD,EAAcC,KAAd,EAA6BiB,MAA7B;AAAA,+CACajB,KADb,iDAC4DD,GAD5D,4GACqKkB,MAAM,CAAClB,GAAD,CAAN,CAAYmB,KADjL;AAAA,GAHA;AAKrBC,EAAAA,aAAa,EAAE,uBAACF,MAAD;AAAA,uGAC2EA,MAD3E;AAAA;AALM,CAAf;AASP,AAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACrB,GAAD;AAC9B,MAAMsB,KAAK,GAAGP,MAAM,CAACf,GAAD,CAApB;;AAEA,MAAI,OAAOsB,KAAP,KAAiB,WAArB,EAAkC;AACjC,UAAM,IAAIC,KAAJ,qBAA4BvB,GAA5B,CAAN;AACA;;oCAL8CwB;AAAAA,IAAAA;;;AAO/C,SAAO,IAAID,KAAJ,MAAaT,MAAb,GAAsBQ,KAAK,MAAL,SAASE,IAAT,CAAtB,CAAP;AACA,CARM;;ACVA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC7BzB,GAD6B,EAE7BC,KAF6B,EAG7BiB,MAH6B;AAK7B,MAAMQ,OAAO,GAAGR,MAAM,CAAClB,GAAD,CAAtB;;AAEA,MACC,OAAO0B,OAAP,KAAmB,WAAnB,IACC,OAAOA,OAAO,CAACP,KAAf,KAAyB,WAAzB,IACA,OAAOO,OAAO,CAACC,QAAf,KAA4B,WAH9B,EAIE;AACD,WAAO,KAAP;AACA;;AAED,MAAI,CAACD,OAAL,EAAc,OAAO,KAAP;AACd,MAAIA,OAAO,CAACP,KAAR,KAAkB,GAAtB,EAA2B,OAAO,IAAP;;AAE3B,MAAI,OAAOO,OAAO,CAACC,QAAf,KAA4B,UAAhC,EAA4C;AAC3C,QAAMC,KAAK,GAAGF,OAAO,CAACC,QAAR,CAAiB1B,KAAjB,CAAd;AACA,QAAI2B,KAAJ,EAAW,OAAO,IAAP;AACX,WAAO,KAAP;AACA;;AAED,MAAI,OAAOF,OAAO,CAACP,KAAf,KAAyB,WAA7B,EAA0C,OAAO,KAAP;AAC1C,SAAOO,OAAO,CAACP,KAAR,CAAcU,QAAd,CAAuB5B,KAAvB,CAAP;AACA,CA1BM;AA4BP,AAAO,IAAM6B,gCAAgC,GAAG,SAAnCA,gCAAmC,CAC/CZ,MAD+C;AAG/C,MAAIa,QAAQ,GAA6B,EAAzC;;AAEA,MAAI,OAAOb,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAMG,eAAe,CAAC,eAAD,EAAkBH,MAAlB,CAArB;AACA;;AAED,qCAA2Bc,MAAM,CAACC,OAAP,CAAef,MAAf,CAA3B,qCAAmD;AAA9C;AAAA,QAAOlB,GAAP;AAAA,QAAYC,KAAZ;AACJ8B,IAAAA,QAAQ,CAAC/B,GAAD,CAAR,GAAgBC,KAAK,WAArB;AACA;;AAED,SAAO8B,QAAP;AACA,CAdM;;ACvBP,IAAMG,aAAa,GAAW;AAC7BlC,EAAAA,GAAG,EAAE;AADwB,CAA9B;AAUA,IAAamC,kBAAkB,GAAG,SAArBA,kBAAqB;MACjCjB,cAAAA;MACQkB,kBAARC;MACAC,gBAAAA;;AAEA,MAAMD,MAAM,gBACRH,aADQ,EAERE,UAFQ,CAAZ;;AAKA,MAAMG,eAAe,GAAGT,gCAAgC,CAACZ,MAAD,CAAxD;;AAEA,MAAMsB,YAAY,GAAG,SAAfA,YAAe;AACpB,WAAO7B,cAAc,CAAC0B,MAAM,CAACrC,GAAR,EAAauC,eAAb,CAArB;AACA,GAFD;;AAIA,kBAAgCE,cAAQ,CAAI;AAC3C,wBACIF,eADJ,EAEIC,YAAY,EAFhB;AAIA,GALuC,CAAxC;AAAA,MAAOT,QAAP;AAAA,MAAiBW,WAAjB;;AAOA,SACCC,4BAAA,CAAChD,iBAAiB,CAACiD,QAAnB;AACC3C,IAAAA,KAAK,EAAE;AACN8B,MAAAA,QAAQ,EAARA,QADM;AAENW,MAAAA,WAAW,EAAXA,WAFM;AAGNxB,MAAAA,MAAM,EAANA,MAHM;AAINmB,MAAAA,MAAM,EAANA;AAJM;GADR,EAQEC,QARF,CADD;AAYA,CAnCM;;ICTMO,aAAa,GAAG,SAAhBA,aAAgB;AAG5B,oBACCC,gBAAU,CAACnD,iBAAD,CADX;AAAA,MAAQoC,QAAR,eAAQA,QAAR;AAAA,MAAkBW,WAAlB,eAAkBA,WAAlB;AAAA,MAA+BxB,MAA/B,eAA+BA,MAA/B;AAAA,MAAuCmB,MAAvC,eAAuCA,MAAvC;;AAKA,MAAME,eAAe,GAAGT,gCAAgC,CAACZ,MAAD,CAAxD;;AAEA,kBAAgCuB,cAAQ,CAAC,IAAD,CAAxC;AAAA,MAAO5C,QAAP;AAAA,MAAiBkD,WAAjB;;AAEA,MAAMC,aAAa,GAAGhB,MAAM,CAACiB,IAAP,CACrBV,eADqB,CAAtB;;AAGA,MAAMW,cAAc,GAAG,SAAjBA,cAAiB,CAAClD,GAAD;AAAA,WACtBgD,aAAa,CAACnB,QAAd,CAAuB7B,GAAvB,CADsB;AAAA,GAAvB;;AAGA,MAAMmD,gBAAgB,GAAG,SAAnBA,gBAAmB,CACxBC,kBADwB;AAGxB,QAAIC,WAAW,GAA2B,EAA1C;;AAEA,uCAA2BrB,MAAM,CAACC,OAAP,CAAemB,kBAAf,CAA3B,qCAA+D;AAA1D;AAAA,UAAOpD,GAAP;AAAA,UAAYC,KAAZ;AACJ,UAAMqD,KAAK,GAAGJ,cAAc,CAAClD,GAAD,CAA5B;AACA,UAAMuD,OAAO,GAAG9B,cAAc,CAACzB,GAAD,EAAMC,KAAN,EAAaiB,MAAb,CAA9B;;AAEA,UAAIoC,KAAJ,EAAW;AACV,YAAIC,OAAJ,EAAa;AACZF,UAAAA,WAAW,CAACrD,GAAD,CAAX,GAAmBC,KAAnB;AACA,SAFD,MAEO;AACNoD,UAAAA,WAAW,CAACrD,GAAD,CAAX,GAAmB+B,QAAQ,CAAC/B,GAAD,CAA3B;AACA,gBAAMqB,eAAe,CACpB,qBADoB,EAEpBrB,GAFoB,EAGpBC,KAHoB,EAIpBiB,MAJoB,CAArB;AAMA;AACD;AACD;;AAED,WAAOmC,WAAP;AACA,GAzBD;;AA2BA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CACzBC,EADyB;AAGzBf,IAAAA,WAAW,CAAC,UAAAX,QAAQ;AAAA,aAAIoB,gBAAgB,CAACM,EAAE,CAAC1B,QAAD,CAAH,CAApB;AAAA,KAAT,CAAX;AACA,GAJD;;AAMA,MAAMS,YAAY,GAAG,SAAfA,YAAe;AACpB,WAAO7B,cAAc,CAAC0B,MAAM,CAACrC,GAAR,EAAauC,eAAb,CAArB;AACA,GAFD;;AAIAmB,EAAAA,eAAS,CAAC;AACT,QAAI,CAAC5D,MAAM,CAACI,YAAZ,EAA0B;AAE1B6C,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,QAAMY,aAAa,GAAGnB,YAAY,EAAlC;;AAEA,QAAIR,MAAM,CAACiB,IAAP,CAAYU,aAAZ,EAA2BC,MAA3B,KAAsC,CAA1C,EAA6C;AAC5ClB,MAAAA,WAAW,CAACH,eAAD,CAAX;AACA;;AAEDG,IAAAA,WAAW,CAACS,gBAAgB,CAACQ,aAAD,CAAjB,CAAX;AACA,GAXQ,EAWN,EAXM,CAAT;AAaAD,EAAAA,eAAS,CAAC;AACT,QAAItD,IAAI,CAACC,SAAL,CAAemC,YAAY,EAA3B,MAAmCpC,IAAI,CAACC,SAAL,CAAe0B,QAAf,CAAvC,EAAiE;AAChEhC,MAAAA,UAAU,CAACsC,MAAM,CAACrC,GAAR,EAAa+B,QAAb,CAAV;AACA;AACD,GAJQ,EAIN,CAACA,QAAD,CAJM,CAAT;;AAQA,MAAM8B,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC7D,GAAD;AAC7B,QAAI,CAACkD,cAAc,CAAClD,GAAD,CAAnB,EAA0B;AACzB,YAAMqB,eAAe,CAAC,gBAAD,EAAmBrB,GAAnB,CAArB;AACA;AACD,GAJD;;AAQA,MAAM8D,YAAY,GAAG,SAAfA,YAAe,CAAC9D,GAAD,EAA2B+D,MAA3B;AACpBF,IAAAA,qBAAqB,CAAC7D,GAAD,CAArB;AAEA,QAAMgE,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAelC,QAAQ,CAAC/B,GAAD,CAAvB,CAAd;AACA,QAAMkE,SAAS,GAAGF,KAAK,KAAKD,MAAM,CAACH,MAAP,GAAgB,CAA1B,GAA8B,CAA9B,GAAkCI,KAAK,GAAG,CAA5D;AAEAR,IAAAA,iBAAiB,CAAC,UAAAzB,QAAQ;AAAA;;AAAA,0BACtBA,QADsB,6BAExB/B,GAFwB,IAElB+D,MAAM,CAACG,SAAD,CAFY;AAAA,KAAT,CAAjB;AAIA,GAVD;;AAYA,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACnE,GAAD;AACb,QAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC/B0C,MAAAA,WAAW,CAAC,UAAA0B,CAAC;AAAA,eAAI7B,eAAJ;AAAA,OAAF,CAAX;AACA;AACA;;AAEDsB,IAAAA,qBAAqB,CAAC7D,GAAD,CAArB;AAEAwD,IAAAA,iBAAiB,CAAC,UAAAzB,QAAQ;AAAA;;AAAA,0BACtBA,QADsB,6BAExB/B,GAFwB,IAElBuC,eAAe,CAACvC,GAAD,CAFG;AAAA,KAAT,CAAjB;AAIA,GAZD;;AAcA,MAAMqE,GAAG,GAAG,SAANA,GAAM,CAACrE,GAAD,EAA2BC,KAA3B;AACX4D,IAAAA,qBAAqB,CAAC7D,GAAD,CAArB;AAEA,QAAI+B,QAAQ,CAAC/B,GAAD,CAAR,KAAkBC,KAAtB,EAA6B;AAC7ByC,IAAAA,WAAW,CAAC,UAAAX,QAAQ;AAAA;;AAAA,aAAIoB,gBAAgB,cAAMpB,QAAN,6BAAiB/B,GAAjB,IAAuBC,KAAvB,cAApB;AAAA,KAAT,CAAX;AACA,GALD;;AAOA,MAAMqE,MAAM,GAAG,SAATA,MAAS,CAACtE,GAAD;AACd6D,IAAAA,qBAAqB,CAAC7D,GAAD,CAArB;AACAwD,IAAAA,iBAAiB,CAAC,UAAAzB,QAAQ;AAAA;;AAAA,0BACtBA,QADsB,6BAExB/B,GAFwB,IAElB,CAAC+B,QAAQ,CAAC/B,GAAD,CAFS;AAAA,KAAT,CAAjB;AAIA,GAND;;AAQA,MAAMuE,aAAa,GAAG,SAAhBA,aAAgB,CACrBvE,GADqB,EAErB+D,MAFqB;AAIrBF,IAAAA,qBAAqB,CAAC7D,GAAD,CAArB;AACAwD,IAAAA,iBAAiB,CAAC,UAAAzB,QAAQ;AAAA;;AAAA,0BACtBA,QADsB,6BAExB/B,GAFwB,IAElB+B,QAAQ,CAAC/B,GAAD,CAAR,KAAkB+D,MAAM,CAAC,CAAD,CAAxB,GAA8BA,MAAM,CAAC,CAAD,CAApC,GAA0CA,MAAM,CAAC,CAAD,CAF9B;AAAA,KAAT,CAAjB;AAIA,GATD;;AAWA,MAAMS,gBAAgB,GAA+B;AACpDC,IAAAA,KAAK,EAAE,CAAC5E,QAD4C;AAEpDiE,IAAAA,YAAY,EAAZA,YAFoD;AAGpDK,IAAAA,KAAK,EAALA,KAHoD;AAIpDE,IAAAA,GAAG,EAAHA,GAJoD;AAKpDC,IAAAA,MAAM,EAANA,MALoD;AAMpDC,IAAAA,aAAa,EAAbA;AANoD,GAArD;;AASA,MAAMG,UAAU,gBACZ3C,QADY,EAEZyC,gBAFY,CAAhB;;AAMA,SAAOE,UAAP;AACA,CAxJM;;ICGMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC/BzD,MAD+B;AAK/B,MAAM0B,QAAQ,GAAG,SAAXA,QAAW;AAAA,QAAGN,QAAH,QAAGA,QAAH;AAAA,WAChBK,4BAAA,CAACR,kBAAD;AAAmCjB,MAAAA,MAAM,EAAEA;KAA3C,EACEoB,QADF,CADgB;AAAA,GAAjB;;AAMA,MAAMsC,QAAQ,GAAG,SAAXA,QAAW;AAChB,WAAO/B,aAAa,EAApB;AACA,GAFD;;AAIA,SAAO;AACND,IAAAA,QAAQ,EAARA,QADM;AAENgC,IAAAA,QAAQ,EAARA;AAFM,GAAP;AAIA,CAnBM;;;;;;;"}
{"version":3,"file":"index.modern.js","sources":["../src/context.ts","../src/storage.ts","../src/errors.ts","../src/logic.ts","../src/AlexandriaProvider.tsx","../src/useAlexandria.ts","../src/create.tsx"],"sourcesContent":["import { createContext } from \"react\"\n\nimport { TAlexandriaContext } from \"types\"\n\nexport const AlexandriaContext = createContext<TAlexandriaContext>({} as never)\n","export const isServer = typeof window === \"undefined\"\n\nexport const saveObject = <T>(key: string, value: T): void => {\n\tif (isServer) return\n\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n}\n\nexport const getBlob = (key: string): string | undefined => {\n\tif (isServer) return undefined\n\n\tlet blob\n\n\ttry {\n\t\tblob = localStorage.getItem(key) || undefined\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n\n\treturn blob || undefined\n}\n\nexport const getSavedObject = <T>(key: string, fallback: T): T => {\n\tconst blob = getBlob(key)\n\n\tif (typeof blob === \"undefined\") {\n\t\tsaveObject(key, fallback)\n\t\treturn fallback\n\t}\n\n\tlet value: T = fallback\n\n\ttry {\n\t\tvalue = JSON.parse(blob) as T\n\t} catch (e) {\n\t\t// Invalid\n\t\tsaveObject(key, \"{}\")\n\t}\n\n\treturn value\n}\n","import { Schema } from \"types\"\n\nconst PREFIX = \"Alexandria: \"\n\nexport const errors = {\n\tunknownSetting: (key: string): string =>\n\t\t`UNKNOWN_SETTING_ERROR: \"${key}\" is not a valid setting. If it should be, please update your schema in the AlexandriaProvider. Your mutation has been ignored and the setting was not changed.`,\n\tinvalidSettingValue: (key: string, value: string, schema: Schema): string =>\n\t\t`INVALID_SETTING_VALUE_ERROR: \"${value}\" is not an allowed value for setting \"${key}\". Your mutation has been ignored and the setting was not changed. The current allowed values are: ${schema[key].allow}. If you want to allow any value, set the \"allow\" property to \"*\".`,\n\tinvalidSchema: (schema: unknown): string =>\n\t\t`INVALID_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is invalid. Got: \"${schema}\"`,\n\temptySchema: (): string =>\n\t\t`EMPTY_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is empty. Please provide a schema with at least one setting.`,\n}\n\nexport const alexandriaError = (key: string, ...args: any[]) => {\n\tconst error = errors[key]\n\n\tif (typeof error === \"undefined\") {\n\t\tthrow new Error(`UNKNOWN_ERROR: ${key}`)\n\t}\n\n\treturn new Error(`${PREFIX}${error(...args)}`)\n}\n","import { alexandriaError } from \"errors\"\nimport { Schema, SettingValue, UnknownSettings } from \"types\"\n\nexport const isAllowedValue = (\n\tkey: string,\n\tvalue: SettingValue,\n\tschema: Schema\n): boolean => {\n\tconst setting = schema[key]\n\n\tif (\n\t\ttypeof setting === \"undefined\" ||\n\t\t(typeof setting.allow === \"undefined\" &&\n\t\t\ttypeof setting.validate === \"undefined\")\n\t) {\n\t\treturn false\n\t}\n\n\tif (!setting) return false\n\tif (setting.allow === \"*\") return true\n\n\tif (typeof setting.validate === \"function\") {\n\t\tconst valid = setting.validate(value)\n\t\tif (valid) return true\n\t\treturn false\n\t}\n\n\tif (typeof setting.allow === \"undefined\") return false\n\treturn setting.allow.includes(value as never)\n}\n\nexport const compileDefaultSettingsFromSchema = (\n\tschema: Schema\n): UnknownSettings => {\n\tlet settings: Partial<UnknownSettings> = {}\n\n\tif (typeof schema !== \"object\") {\n\t\tthrow alexandriaError(\"invalidSchema\", schema)\n\t}\n\n\tif (Object.keys(schema || {}).length === 0) {\n\t\tthrow alexandriaError(\"emptySchema\")\n\t}\n\n\tfor (const [key, value] of Object.entries(schema || {})) {\n\t\tsettings[key] = value.default\n\t}\n\n\treturn settings as UnknownSettings // Caller is responsible for providing defaults\n}\n","import React, { useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { getSavedObject } from \"storage\"\nimport { compileDefaultSettingsFromSchema } from \"logic\"\n\nimport type { Config, Schema, UnknownSettings } from \"types\"\n\nconst defaultConfig: Config = {\n\tkey: \"alexandria\",\n}\n\ninterface Props {\n\tschema: Schema\n\tconfig?: Config\n\tchildren: React.ReactNode\n}\n\nexport const AlexandriaProvider = <\n\tKnownSettings extends UnknownSettings = UnknownSettings\n>({\n\tschema,\n\tconfig: userConfig,\n\tchildren,\n}: Props) => {\n\tconst config: Config = {\n\t\t...defaultConfig,\n\t\t...userConfig,\n\t}\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(\n\t\tschema\n\t) as KnownSettings\n\n\tconst loadSettings = (): KnownSettings => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tconst [settings, setSettings] = useState<KnownSettings>(() => {\n\t\treturn {\n\t\t\t...defaultSettings,\n\t\t\t...loadSettings(),\n\t\t}\n\t})\n\n\treturn (\n\t\t<AlexandriaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tsettings,\n\t\t\t\tsetSettings,\n\t\t\t\tschema,\n\t\t\t\tconfig,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AlexandriaContext.Provider>\n\t)\n}\n","import { useContext, useEffect, useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { compileDefaultSettingsFromSchema, isAllowedValue } from \"logic\"\nimport { getSavedObject, saveObject } from \"storage\"\nimport { alexandriaError } from \"errors\"\n\nimport { AlexandriaOperatingContext, UnknownSettings } from \"types\"\n\nexport const useAlexandria = <\n\tT extends UnknownSettings = UnknownSettings\n>(): AlexandriaOperatingContext & T => {\n\tconst { settings, setSettings, schema, config } =\n\t\tuseContext(AlexandriaContext)\n\n\ttype KnownSettings = typeof settings\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(schema)\n\n\tconst [isServer, setIsServer] = useState(true)\n\n\tconst knownSettings = Object.keys(\n\t\tdefaultSettings\n\t) as (keyof KnownSettings)[]\n\tconst isKnownSetting = (key: keyof KnownSettings): boolean =>\n\t\tknownSettings.includes(key)\n\n\tconst validateSettings = (\n\t\tsettingsToValidate: KnownSettings\n\t): KnownSettings => {\n\t\tlet newSettings: Partial<KnownSettings> = {}\n\n\t\tfor (const [key, value] of Object.entries(settingsToValidate)) {\n\t\t\tconst known = isKnownSetting(key)\n\t\t\tconst allowed = isAllowedValue(key, value, schema)\n\n\t\t\tif (known) {\n\t\t\t\tif (allowed) {\n\t\t\t\t\tnewSettings[key] = value as never\n\t\t\t\t} else {\n\t\t\t\t\tnewSettings[key] = settings[key]\n\t\t\t\t\tthrow alexandriaError(\n\t\t\t\t\t\t\"invalidSettingValue\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tschema\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSettings as KnownSettings\n\t}\n\n\tconst setWithValidation = (\n\t\tcb: (settings: KnownSettings) => KnownSettings\n\t) => {\n\t\tsetSettings(settings => validateSettings(cb(settings)))\n\t}\n\n\tconst loadSettings = () => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!window.localStorage) return\n\n\t\tsetIsServer(false)\n\t\tconst savedSettings = loadSettings()\n\n\t\tif (Object.keys(savedSettings).length === 0) {\n\t\t\tsetSettings(defaultSettings)\n\t\t}\n\n\t\tsetSettings(validateSettings(savedSettings))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (JSON.stringify(loadSettings()) !== JSON.stringify(settings)) {\n\t\t\tsaveObject(config.key, settings)\n\t\t}\n\t}, [settings])\n\n\t//////////\n\n\tconst throwIfUnknownSetting = (key: keyof KnownSettings) => {\n\t\tif (!isKnownSetting(key)) {\n\t\t\tthrow alexandriaError(\"unknownSetting\", key)\n\t\t}\n\t}\n\n\t//////////\n\n\tconst cycleBetween = (key: keyof KnownSettings, values: string[]) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tconst index = values.indexOf(settings[key] as string)\n\t\tconst nextIndex = index === values.length - 1 ? 0 : index + 1\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: values[nextIndex],\n\t\t}))\n\t}\n\n\tconst reset = (key?: keyof KnownSettings) => {\n\t\tif (typeof key === \"undefined\") {\n\t\t\tsetSettings(_ => defaultSettings)\n\t\t\treturn\n\t\t}\n\n\t\tthrowIfUnknownSetting(key)\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: defaultSettings[key],\n\t\t}))\n\t}\n\n\tconst set = (key: keyof KnownSettings, value: any) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tif (settings[key] === value) return\n\t\tsetSettings(settings => validateSettings({ ...settings, [key]: value }))\n\t}\n\n\tconst toggle = (key: keyof KnownSettings) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: !settings[key],\n\t\t}))\n\t}\n\n\tconst toggleBetween = (\n\t\tkey: keyof KnownSettings,\n\t\tvalues: [string, string]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: settings[key] === values[0] ? values[1] : values[0],\n\t\t}))\n\t}\n\n\tconst operatingContext: AlexandriaOperatingContext = {\n\t\tready: !isServer,\n\t\tcycleBetween,\n\t\treset,\n\t\tset,\n\t\ttoggle,\n\t\ttoggleBetween,\n\t}\n\n\tconst alexandria: AlexandriaOperatingContext & KnownSettings = {\n\t\t...settings,\n\t\t...operatingContext,\n\t}\n\n\t// @ts-ignore\n\treturn alexandria\n}\n","import React from \"react\"\n\nimport { AlexandriaProvider } from \"AlexandriaProvider\"\nimport { useAlexandria } from \"useAlexandria\"\n\nimport {\n\tAlexandriaCreationContext,\n\tAlexandriaOperatingContext,\n\tSchema,\n\tUnknownSettings,\n} from \"types\"\n\nexport const createAlexandria = <KnownSettings extends UnknownSettings>(\n\tschema: Schema\n): AlexandriaCreationContext<KnownSettings> => {\n\ttype Alexandria = AlexandriaOperatingContext & KnownSettings\n\n\tconst Provider = ({ children }: { children: React.ReactNode }) => (\n\t\t<AlexandriaProvider<KnownSettings> schema={schema}>\n\t\t\t{children}\n\t\t</AlexandriaProvider>\n\t)\n\n\tconst Consumer = (): Alexandria => {\n\t\treturn useAlexandria<KnownSettings>()\n\t}\n\n\treturn {\n\t\tProvider,\n\t\tConsumer,\n\t}\n}\n"],"names":["AlexandriaContext","createContext","isServer","window","saveObject","key","value","localStorage","setItem","JSON","stringify","e","getBlob","undefined","blob","getItem","getSavedObject","fallback","parse","PREFIX","errors","unknownSetting","invalidSettingValue","schema","allow","invalidSchema","emptySchema","alexandriaError","args","error","Error","isAllowedValue","setting","validate","valid","includes","compileDefaultSettingsFromSchema","settings","Object","keys","length","entries","default","defaultConfig","AlexandriaProvider","config","userConfig","children","defaultSettings","loadSettings","setSettings","useState","React","Provider","useAlexandria","useContext","setIsServer","knownSettings","isKnownSetting","validateSettings","settingsToValidate","newSettings","known","allowed","setWithValidation","cb","useEffect","savedSettings","throwIfUnknownSetting","cycleBetween","values","index","indexOf","nextIndex","reset","_","set","toggle","toggleBetween","operatingContext","ready","alexandria","createAlexandria","Consumer"],"mappings":"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"}
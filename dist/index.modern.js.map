{"version":3,"file":"index.modern.js","sources":["../src/context.ts","../src/storage.ts","../src/errors.ts","../src/logic.ts","../src/AlexandriaProvider.tsx","../src/useAlexandria.ts","../src/create.tsx"],"sourcesContent":["import { createContext } from \"react\"\n\nimport { TAlexandriaContext } from \"types\"\n\nexport const AlexandriaContext = createContext<TAlexandriaContext>({} as never)\n","export const isServer = typeof window === \"undefined\"\n\nexport const saveObject = <T>(key: string, value: T): void => {\n\tif (isServer) return\n\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n}\n\nexport const getBlob = (key: string): string | undefined => {\n\tif (isServer) return undefined\n\n\tlet blob\n\n\ttry {\n\t\tblob = localStorage.getItem(key) || undefined\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n\n\treturn blob || undefined\n}\n\nexport const getSavedObject = <T>(key: string, fallback: T): T => {\n\tconst blob = getBlob(key)\n\n\tif (typeof blob === \"undefined\") {\n\t\tsaveObject(key, fallback)\n\t\treturn fallback\n\t}\n\n\tlet value: T = fallback\n\n\ttry {\n\t\tvalue = JSON.parse(blob) as T\n\t} catch (e) {\n\t\t// Invalid\n\t\tsaveObject(key, \"{}\")\n\t}\n\n\treturn value\n}\n","import { Schema } from \"types\"\n\nconst PREFIX = \"Alexandria: \"\n\nexport const errors = {\n\tunknownSetting: (key: string): string =>\n\t\t`UNKNOWN_SETTING_ERROR: \"${key}\" is not a valid setting. If it should be, please update your schema in the AlexandriaProvider. Your mutation has been ignored and the setting was not changed.`,\n\tinvalidSettingValue: (key: string, value: string, schema: Schema): string =>\n\t\t`INVALID_SETTING_VALUE_ERROR: \"${value}\" is not an allowed value for setting \"${key}\". Your mutation has been ignored and the setting was not changed. The current allowed values are: ${schema[key].allow}. If you want to allow any value, set the \"allow\" property to \"*\".`,\n\tinvalidSchema: (schema: unknown): string =>\n\t\t`INVALID_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is invalid. Got: \"${schema}\"`,\n}\n\nexport const alexandriaError = (key: string, ...args: any[]) => {\n\tconst error = errors[key]\n\n\tif (typeof error === \"undefined\") {\n\t\tthrow new Error(`UNKNOWN_ERROR: ${key}`)\n\t}\n\n\treturn new Error(`${PREFIX}${error(...args)}`)\n}\n","import { alexandriaError } from \"errors\"\nimport { Schema, SettingValue, UnknownSettings } from \"types\"\n\nexport const isAllowedValue = (\n\tkey: string,\n\tvalue: SettingValue,\n\tschema: Schema\n): boolean => {\n\tconst setting = schema[key]\n\n\tif (\n\t\ttypeof setting === \"undefined\" ||\n\t\t(typeof setting.allow === \"undefined\" &&\n\t\t\ttypeof setting.validate === \"undefined\")\n\t) {\n\t\treturn false\n\t}\n\n\tif (!setting) return false\n\tif (setting.allow === \"*\") return true\n\n\tif (typeof setting.validate === \"function\") {\n\t\tconst valid = setting.validate(value)\n\t\tif (valid) return true\n\t\treturn false\n\t}\n\n\tif (typeof setting.allow === \"undefined\") return false\n\treturn setting.allow.includes(value as never)\n}\n\nexport const compileDefaultSettingsFromSchema = (\n\tschema: Schema\n): UnknownSettings => {\n\tlet settings: Partial<UnknownSettings> = {}\n\n\tif (typeof schema !== \"object\") {\n\t\tthrow alexandriaError(\"invalidSchema\", schema)\n\t}\n\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tsettings[key] = value.default\n\t}\n\n\treturn settings as UnknownSettings // Caller is responsible for providing defaults\n}\n","import React, { useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { getSavedObject } from \"storage\"\nimport { compileDefaultSettingsFromSchema } from \"logic\"\n\nimport type { Config, Schema, UnknownSettings } from \"types\"\n\nconst defaultConfig: Config = {\n\tkey: \"alexandria\",\n}\n\ninterface Props {\n\tschema: Schema\n\tconfig?: Config\n\tchildren: React.ReactNode\n}\n\nexport const AlexandriaProvider = <T extends UnknownSettings = UnknownSettings>({\n\tschema,\n\tconfig: userConfig,\n\tchildren,\n}: Props) => {\n\tconst config: Config = {\n\t\t...defaultConfig,\n\t\t...userConfig,\n\t}\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(schema) as T\n\n\tconst loadSettings = (): T => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tconst [settings, setSettings] = useState<T>(() => {\n\t\treturn {\n\t\t\t...defaultSettings,\n\t\t\t...loadSettings(),\n\t\t}\n\t})\n\n\treturn (\n\t\t<AlexandriaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tsettings,\n\t\t\t\tsetSettings,\n\t\t\t\tschema,\n\t\t\t\tconfig,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AlexandriaContext.Provider>\n\t)\n}\n","import { useContext, useEffect, useState } from \"react\"\n\nimport { AlexandriaContext } from \"context\"\nimport { compileDefaultSettingsFromSchema, isAllowedValue } from \"logic\"\nimport { getSavedObject, saveObject } from \"storage\"\nimport { alexandriaError } from \"errors\"\n\nimport { AlexandriaOperatingContext, UnknownSettings } from \"types\"\n\nexport const useAlexandria = <\n\tT extends UnknownSettings = UnknownSettings\n>(): AlexandriaOperatingContext & T => {\n\tconst { settings, setSettings, schema, config } =\n\t\tuseContext(AlexandriaContext)\n\n\ttype KnownSettings = typeof settings\n\n\tconst defaultSettings = compileDefaultSettingsFromSchema(schema)\n\n\tconst [isServer, setIsServer] = useState(true)\n\n\tconst knownSettings = Object.keys(\n\t\tdefaultSettings\n\t) as (keyof KnownSettings)[]\n\tconst isKnownSetting = (key: keyof KnownSettings): boolean =>\n\t\tknownSettings.includes(key)\n\n\tconst validateSettings = (\n\t\tsettingsToValidate: KnownSettings\n\t): KnownSettings => {\n\t\tlet newSettings: Partial<KnownSettings> = {}\n\n\t\tfor (const [key, value] of Object.entries(settingsToValidate)) {\n\t\t\tconst known = isKnownSetting(key)\n\t\t\tconst allowed = isAllowedValue(key, value, schema)\n\n\t\t\tif (known) {\n\t\t\t\tif (allowed) {\n\t\t\t\t\tnewSettings[key] = value as never\n\t\t\t\t} else {\n\t\t\t\t\tnewSettings[key] = settings[key]\n\t\t\t\t\tthrow alexandriaError(\n\t\t\t\t\t\t\"invalidSettingValue\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tschema\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSettings as KnownSettings\n\t}\n\n\tconst setWithValidation = (\n\t\tcb: (settings: KnownSettings) => KnownSettings\n\t) => {\n\t\tsetSettings(settings => validateSettings(cb(settings)))\n\t}\n\n\tconst loadSettings = () => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!window.localStorage) return\n\n\t\tsetIsServer(false)\n\t\tconst savedSettings = loadSettings()\n\n\t\tif (Object.keys(savedSettings).length === 0) {\n\t\t\tsetSettings(defaultSettings)\n\t\t}\n\n\t\tsetSettings(validateSettings(savedSettings))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (JSON.stringify(loadSettings()) !== JSON.stringify(settings)) {\n\t\t\tsaveObject(config.key, settings)\n\t\t}\n\t}, [settings])\n\n\t//////////\n\n\tconst throwIfUnknownSetting = (key: keyof KnownSettings) => {\n\t\tif (!isKnownSetting(key)) {\n\t\t\tthrow alexandriaError(\"unknownSetting\", key)\n\t\t}\n\t}\n\n\t//////////\n\n\tconst cycleBetween = (key: keyof KnownSettings, values: string[]) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tconst index = values.indexOf(settings[key] as string)\n\t\tconst nextIndex = index === values.length - 1 ? 0 : index + 1\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: values[nextIndex],\n\t\t}))\n\t}\n\n\tconst reset = (key?: keyof KnownSettings) => {\n\t\tif (typeof key === \"undefined\") {\n\t\t\tsetSettings(_ => defaultSettings)\n\t\t\treturn\n\t\t}\n\n\t\tthrowIfUnknownSetting(key)\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: defaultSettings[key],\n\t\t}))\n\t}\n\n\tconst set = (key: keyof KnownSettings, value: any) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tif (settings[key] === value) return\n\t\tsetSettings(settings => validateSettings({ ...settings, [key]: value }))\n\t}\n\n\tconst toggle = (key: keyof KnownSettings) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: !settings[key],\n\t\t}))\n\t}\n\n\tconst toggleBetween = (\n\t\tkey: keyof KnownSettings,\n\t\tvalues: [string, string]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: settings[key] === values[0] ? values[1] : values[0],\n\t\t}))\n\t}\n\n\tconst operatingContext: AlexandriaOperatingContext = {\n\t\tready: !isServer,\n\t\tcycleBetween,\n\t\treset,\n\t\tset,\n\t\ttoggle,\n\t\ttoggleBetween,\n\t}\n\n\tconst alexandria: AlexandriaOperatingContext & KnownSettings = {\n\t\t...settings,\n\t\t...operatingContext,\n\t}\n\n\t// @ts-ignore\n\treturn alexandria\n}\n","import React from \"react\"\n\nimport { AlexandriaProvider } from \"AlexandriaProvider\"\n\nimport {\n\tAlexandriaCreationContext,\n\tAlexandriaOperatingContext,\n\tSchema,\n\tUnknownSettings,\n} from \"types\"\nimport { useAlexandria } from \"useAlexandria\"\n\nexport const createAlexandria = <KnownSettings extends UnknownSettings>(\n\tschema: Schema\n): AlexandriaCreationContext<KnownSettings> => {\n\ttype Alexandria = AlexandriaOperatingContext & KnownSettings\n\n\tconst Provider = ({ children }: { children: React.ReactNode }) => (\n\t\t<AlexandriaProvider<KnownSettings> schema={schema}>\n\t\t\t{children}\n\t\t</AlexandriaProvider>\n\t)\n\n\tconst Consumer = (): Alexandria => {\n\t\treturn useAlexandria<KnownSettings>()\n\t}\n\n\treturn {\n\t\tProvider,\n\t\tConsumer,\n\t}\n}\n"],"names":["AlexandriaContext","createContext","isServer","window","saveObject","key","value","localStorage","setItem","JSON","stringify","e","getBlob","undefined","blob","getItem","getSavedObject","fallback","parse","PREFIX","errors","unknownSetting","invalidSettingValue","schema","allow","invalidSchema","alexandriaError","args","error","Error","isAllowedValue","setting","validate","valid","includes","compileDefaultSettingsFromSchema","settings","Object","entries","default","defaultConfig","AlexandriaProvider","config","userConfig","children","defaultSettings","loadSettings","setSettings","useState","React","Provider","useAlexandria","useContext","setIsServer","knownSettings","keys","isKnownSetting","validateSettings","settingsToValidate","newSettings","known","allowed","setWithValidation","cb","useEffect","savedSettings","length","throwIfUnknownSetting","cycleBetween","values","index","indexOf","nextIndex","reset","_","set","toggle","toggleBetween","operatingContext","ready","alexandria","createAlexandria","Consumer"],"mappings":"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"}
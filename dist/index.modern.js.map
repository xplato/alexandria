{"version":3,"file":"index.modern.js","sources":["../src/context.ts","../src/storage.ts","../src/errors.ts","../src/logic.ts","../src/AlexandriaProvider.tsx","../src/useAlexandria.ts","../src/create.tsx"],"sourcesContent":["import { createContext } from \"react\"\n\nimport { TAlexandriaContext } from \"./types\"\n\n// Consumers must cast this to TAlexandriaContext<TypedSettings>\nexport const AlexandriaContext = createContext<TAlexandriaContext<any>>(\n\t{} as never\n)\n","const isServer = typeof window === \"undefined\"\n\nexport const saveObject = <T>(key: string, value: T): void => {\n\tif (isServer) return\n\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n}\n\nexport const getBlob = (key: string): string | undefined => {\n\tif (isServer) return undefined\n\n\tlet blob\n\n\ttry {\n\t\tblob = localStorage.getItem(key) || undefined\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n\n\treturn blob || undefined\n}\n\nexport const getSavedObject = <T>(key: string, fallback: T): T => {\n\tconst blob = getBlob(key)\n\n\tif (typeof blob === \"undefined\") {\n\t\tsaveObject(key, fallback)\n\t\treturn fallback\n\t}\n\n\tlet value: T = fallback\n\n\ttry {\n\t\tvalue = JSON.parse(blob) as T\n\t} catch (e) {\n\t\t// Invalid\n\t\tsaveObject(key, \"{}\")\n\t}\n\n\treturn value\n}\n","import { AlexandriaSchema } from \"./types\"\n\nconst PREFIX = \"Alexandria: \"\n\nexport const errors = {\n\tunknownSetting: (key: string): string =>\n\t\t`UNKNOWN_SETTING_ERROR: \"${key}\" is not a valid setting. If it should be, please update your schema in the AlexandriaProvider. Your mutation has been ignored and the setting was not changed.`,\n\tinvalidSettingValue: (\n\t\tkey: string,\n\t\tvalue: string,\n\t\tschema: AlexandriaSchema\n\t): string =>\n\t\t`INVALID_SETTING_VALUE_ERROR: \"${value}\" is not an allowed value for setting \"${key}\". Your mutation has been ignored and the setting was not changed. The current allowed values are: ${schema[key].allow}. If you want to allow any value, set the \"allow\" property to \"*\".`,\n\tinvalidSchema: (schema: unknown): string =>\n\t\t`INVALID_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is invalid. Got: \"${schema}\"`,\n\temptySchema: (): string =>\n\t\t`EMPTY_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is empty. Please provide a schema with at least one setting.`,\n}\n\nexport const alexandriaError = (key: string, ...args: any[]) => {\n\tconst error = errors[key]\n\n\tif (typeof error === \"undefined\") {\n\t\tthrow new Error(`UNKNOWN_ERROR: ${key}`)\n\t}\n\n\treturn new Error(`${PREFIX}${error(...args)}`)\n}\n","import { alexandriaError } from \"./errors\"\nimport { AlexandriaSchema, AlexandriaSetting } from \"./types\"\n\nexport const isAllowedValue = (\n\tkey: string,\n\tvalue: AlexandriaSetting,\n\tschema: AlexandriaSchema\n): boolean => {\n\tconst setting = schema[key]\n\n\tif (\n\t\ttypeof setting === \"undefined\" ||\n\t\t(typeof setting.allow === \"undefined\" &&\n\t\t\ttypeof setting.validate === \"undefined\")\n\t) {\n\t\treturn false\n\t}\n\n\tif (!setting) return false\n\tif (setting.allow === \"*\") return true\n\n\tif (typeof setting.validate === \"function\") {\n\t\tconst valid = setting.validate(value)\n\t\tif (valid) return true\n\t\treturn false\n\t}\n\n\tif (typeof setting.allow === \"undefined\") return false\n\treturn setting.allow.includes(value as never)\n}\n\nexport const compileDefaultSettingsFromSchema = <TypedSettings extends {}>(\n\tschema: AlexandriaSchema\n): TypedSettings => {\n\tlet settings: Partial<TypedSettings> = {}\n\n\tif (typeof schema !== \"object\") {\n\t\tthrow alexandriaError(\"invalidSchema\", schema)\n\t}\n\n\tif (Object.keys(schema || {}).length === 0) {\n\t\tthrow alexandriaError(\"emptySchema\")\n\t}\n\n\tfor (const [key, value] of Object.entries(schema || {})) {\n\t\tsettings[key] = value.default\n\t}\n\n\treturn settings as TypedSettings // Caller is responsible for providing defaults\n}\n","import React, { useState } from \"react\"\n\nimport { AlexandriaContext } from \"./context\"\nimport { getSavedObject } from \"./storage\"\nimport { compileDefaultSettingsFromSchema } from \"./logic\"\n\nimport type { AlexandriaConfig, AlexandriaSchema } from \"./types\"\n\nconst defaultConfig: AlexandriaConfig = {\n\tkey: \"alexandria\",\n}\n\ninterface Props {\n\tschema: AlexandriaSchema\n\tconfig?: AlexandriaConfig\n\tchildren: React.ReactNode\n}\n\nexport const AlexandriaProvider = <TypedSettings extends {}>({\n\tschema,\n\tconfig: userConfig,\n\tchildren,\n}: Props) => {\n\tconst config: AlexandriaConfig = {\n\t\t...defaultConfig,\n\t\t...userConfig,\n\t}\n\n\t// const AlexandriaContext = createAlexandriaContext<TypedSettings>()\n\n\tconst defaultSettings =\n\t\tcompileDefaultSettingsFromSchema<TypedSettings>(schema)\n\n\tconst loadSettings = (): TypedSettings => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tconst [settings, setSettings] = useState<TypedSettings>(() => {\n\t\treturn {\n\t\t\t...defaultSettings,\n\t\t\t...loadSettings(),\n\t\t}\n\t})\n\n\treturn (\n\t\t<AlexandriaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tsettings,\n\t\t\t\tsetSettings,\n\t\t\t\tschema,\n\t\t\t\tconfig,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AlexandriaContext.Provider>\n\t)\n}\n","import { Context, useContext, useEffect, useState } from \"react\"\n\nimport { AlexandriaContext } from \"./context\"\nimport { compileDefaultSettingsFromSchema, isAllowedValue } from \"./logic\"\nimport { getSavedObject, saveObject } from \"./storage\"\nimport { alexandriaError } from \"./errors\"\n\nimport {\n\tAlexandriaOperatingContext,\n\tAlexandriaSetting,\n\tTAlexandriaContext,\n} from \"./types\"\n\nexport const useAlexandria = <\n\tTypedSettings extends {}\n>(): AlexandriaOperatingContext<TypedSettings> & TypedSettings => {\n\tconst { settings, setSettings, schema, config } = useContext(\n\t\tAlexandriaContext as Context<TAlexandriaContext<TypedSettings>>\n\t)\n\tconst defaultSettings =\n\t\tcompileDefaultSettingsFromSchema<TypedSettings>(schema)\n\tconst knownSettings = Object.keys(\n\t\tdefaultSettings\n\t) as (keyof TypedSettings)[]\n\n\tconst [isServer, setIsServer] = useState(true)\n\n\tconst isKnownSetting = (key: keyof TypedSettings): boolean =>\n\t\tknownSettings.includes(key)\n\n\tconst validateSettings = (\n\t\tsettingsToValidate: TypedSettings\n\t): TypedSettings => {\n\t\tlet newSettings: Partial<TypedSettings> = {}\n\n\t\tfor (const [key, value] of Object.entries(settingsToValidate)) {\n\t\t\tconst known = isKnownSetting(key as keyof TypedSettings)\n\t\t\tconst allowed = isAllowedValue(\n\t\t\t\tkey,\n\t\t\t\tvalue as AlexandriaSetting,\n\t\t\t\tschema\n\t\t\t)\n\n\t\t\tif (known) {\n\t\t\t\tif (allowed) {\n\t\t\t\t\tnewSettings[key] = value as never\n\t\t\t\t} else {\n\t\t\t\t\tnewSettings[key] = settings[key]\n\t\t\t\t\tthrow alexandriaError(\n\t\t\t\t\t\t\"invalidSettingValue\",\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tschema\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSettings as TypedSettings\n\t}\n\n\tconst setWithValidation = (\n\t\tcb: (settings: TypedSettings) => TypedSettings\n\t) => {\n\t\tsetSettings(settings => validateSettings(cb(settings as TypedSettings)))\n\t}\n\n\tconst loadSettings = () => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!window.localStorage) return\n\n\t\tsetIsServer(false)\n\t\tconst savedSettings = loadSettings()\n\n\t\tif (Object.keys(savedSettings).length === 0) {\n\t\t\tsetSettings(defaultSettings)\n\t\t}\n\n\t\tsetSettings(validateSettings(savedSettings as TypedSettings))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (JSON.stringify(loadSettings()) !== JSON.stringify(settings)) {\n\t\t\tsaveObject(config.key, settings)\n\t\t}\n\t}, [settings])\n\n\t//////////\n\n\tconst throwIfUnknownSetting = (key: keyof TypedSettings) => {\n\t\tif (!isKnownSetting(key)) {\n\t\t\tthrow alexandriaError(\"unknownSetting\", key)\n\t\t}\n\t}\n\n\t//////////\n\n\tconst cycleBetween = (key: keyof TypedSettings, values: string[]) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\t// @ts-ignore\n\t\tconst index = values.indexOf(settings[key] as string)\n\t\tconst nextIndex = index === values.length - 1 ? 0 : index + 1\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: values[nextIndex],\n\t\t}))\n\t}\n\n\tconst reset = (key?: keyof TypedSettings) => {\n\t\tif (typeof key === \"undefined\") {\n\t\t\tsetSettings(_ => defaultSettings)\n\t\t\treturn\n\t\t}\n\n\t\tthrowIfUnknownSetting(key)\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: defaultSettings[key],\n\t\t}))\n\t}\n\n\tconst set = <Key extends keyof TypedSettings>(\n\t\tkey: Key,\n\t\tvalue: TypedSettings[Key]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tif (settings[key] === value) return\n\t\tsetSettings(settings => validateSettings({ ...settings, [key]: value }))\n\t}\n\n\tconst toggle = (key: keyof TypedSettings) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: !settings[key],\n\t\t}))\n\t}\n\n\tconst toggleBetween = <Key extends keyof TypedSettings>(\n\t\tkey: Key,\n\t\tvalues: TypedSettings[Key][]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t// @ts-ignore\n\t\t\t[key]: settings[key] === values[0] ? values[1] : values[0],\n\t\t}))\n\t}\n\n\tconst operatingContext: AlexandriaOperatingContext<TypedSettings> = {\n\t\tready: !isServer,\n\t\tcycleBetween,\n\t\treset,\n\t\tset,\n\t\ttoggle,\n\t\ttoggleBetween,\n\t}\n\n\tconst alexandria: AlexandriaOperatingContext<TypedSettings> &\n\t\tTypedSettings = {\n\t\t...settings,\n\t\t...operatingContext,\n\t}\n\n\treturn alexandria\n}\n","import React from \"react\"\n\nimport { AlexandriaProvider } from \"./AlexandriaProvider\"\nimport { useAlexandria } from \"./useAlexandria\"\n\nimport { AlexandriaSchema } from \"./types\"\n\nexport const createAlexandria = <TypedSettings extends {}>(\n\tschema: AlexandriaSchema\n) => {\n\tconst Provider = ({ children }: { children: React.ReactNode }) => (\n\t\t<AlexandriaProvider<TypedSettings> schema={schema}>\n\t\t\t{children}\n\t\t</AlexandriaProvider>\n\t)\n\n\tconst useConsumer = () => {\n\t\treturn useAlexandria<TypedSettings>()\n\t}\n\n\treturn {\n\t\tProvider,\n\t\tuseConsumer,\n\t}\n}\n"],"names":["AlexandriaContext","createContext","isServer","window","saveObject","key","value","localStorage","setItem","JSON","stringify","e","getBlob","undefined","blob","getItem","getSavedObject","fallback","parse","PREFIX","errors","unknownSetting","invalidSettingValue","schema","allow","invalidSchema","emptySchema","alexandriaError","args","error","Error","isAllowedValue","setting","validate","valid","includes","compileDefaultSettingsFromSchema","settings","Object","keys","length","entries","default","defaultConfig","AlexandriaProvider","config","userConfig","children","defaultSettings","loadSettings","setSettings","useState","React","Provider","useAlexandria","useContext","knownSettings","setIsServer","isKnownSetting","validateSettings","settingsToValidate","newSettings","known","allowed","setWithValidation","cb","useEffect","savedSettings","throwIfUnknownSetting","cycleBetween","values","index","indexOf","nextIndex","reset","_","set","toggle","toggleBetween","operatingContext","ready","alexandria","createAlexandria","useConsumer"],"mappings":"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"}
{"version":3,"file":"index.modern.js","sources":["../src/context.ts","../src/storage.ts","../src/errors.ts","../src/logic.ts","../src/AlexandriaProvider.tsx","../src/useAlexandria.ts","../src/create.tsx"],"sourcesContent":["import { createContext } from \"react\"\n\nimport { TAlexandriaContext } from \"./types\"\n\n// Consumers must cast this to TAlexandriaContext<TypedSettings>\nexport const AlexandriaContext = createContext<TAlexandriaContext<any>>(\n\t{} as never\n)\n","const isServer = typeof window === \"undefined\"\n\nexport const saveObject = <T>(key: string, value: T): void => {\n\tif (isServer) return\n\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n}\n\nexport const getBlob = (key: string): string | undefined => {\n\tif (isServer) return undefined\n\n\tlet blob\n\n\ttry {\n\t\tblob = localStorage.getItem(key) || undefined\n\t} catch (e) {\n\t\t// Unsupported\n\t}\n\n\treturn blob || undefined\n}\n\nexport const getSavedObject = <T>(key: string, fallback: T): T => {\n\tconst blob = getBlob(key)\n\n\tif (typeof blob === \"undefined\") {\n\t\tsaveObject(key, fallback)\n\t\treturn fallback\n\t}\n\n\tlet value: T = fallback\n\n\ttry {\n\t\tvalue = JSON.parse(blob) as T\n\t} catch (e) {\n\t\t// Invalid\n\t\tsaveObject(key, \"{}\")\n\t}\n\n\treturn value\n}\n","import { AlexandriaSchema } from \"./types\"\n\nconst PREFIX = \"Alexandria: \"\n\nexport const errors = {\n\tunknownSetting: (key: string): string =>\n\t\t`UNKNOWN_SETTING_ERROR: \"${key}\" is not a valid setting. If it should be, please update your schema in the AlexandriaProvider. Your mutation has been ignored and the setting was not changed.`,\n\tinvalidSettingValue: (\n\t\tkey: string,\n\t\tvalue: string,\n\t\tschema: AlexandriaSchema\n\t): string =>\n\t\t`INVALID_SETTING_VALUE_ERROR: \"${value}\" is not an allowed value for setting \"${key}\". The setting was reset to the default value. The current allowed values are: ${schema[key].allow}. If you want to allow any value, set the \"allow\" property to \"*\".`,\n\tinvalidSchema: (schema: unknown): string =>\n\t\t`INVALID_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is invalid. Got: \"${schema}\"`,\n\temptySchema: (): string =>\n\t\t`EMPTY_SCHEMA_ERROR: The schema provided to the AlexandriaProvider is empty. Please provide a schema with at least one setting.`,\n}\n\nexport const alexandriaError = (key: string, ...args: any[]) => {\n\tconst error = errors[key]\n\n\tif (typeof error === \"undefined\") {\n\t\tthrow new Error(`UNKNOWN_ERROR: ${key}`)\n\t}\n\n\treturn new Error(`${PREFIX}${error(...args)}`)\n}\n","import { alexandriaError } from \"./errors\"\nimport { AlexandriaSchema, AlexandriaSetting } from \"./types\"\n\nexport const isAllowedValue = (\n\tkey: string,\n\tvalue: AlexandriaSetting,\n\tschema: AlexandriaSchema\n): boolean => {\n\tconst setting = schema[key]\n\n\tif (\n\t\ttypeof setting === \"undefined\" ||\n\t\t(typeof setting.allow === \"undefined\" &&\n\t\t\ttypeof setting.validate === \"undefined\")\n\t) {\n\t\treturn false\n\t}\n\n\tif (!setting) return false\n\tif (setting.allow === \"*\") return true\n\n\tif (typeof setting.validate === \"function\") {\n\t\tconst valid = setting.validate(value)\n\t\tif (valid) return true\n\t\treturn false\n\t}\n\n\tif (typeof setting.allow === \"undefined\") return false\n\treturn setting.allow.includes(value as never)\n}\n\nexport const compileDefaultSettingsFromSchema = <TypedSettings extends {}>(\n\tschema: AlexandriaSchema\n): TypedSettings => {\n\tlet settings: Partial<TypedSettings> = {}\n\n\tif (typeof schema !== \"object\") {\n\t\tthrow alexandriaError(\"invalidSchema\", schema)\n\t}\n\n\tif (Object.keys(schema || {}).length === 0) {\n\t\tthrow alexandriaError(\"emptySchema\")\n\t}\n\n\tfor (const [key, value] of Object.entries(schema || {})) {\n\t\tsettings[key] = value.default\n\t}\n\n\treturn settings as TypedSettings // Caller is responsible for providing defaults\n}\n","import React, { useState } from \"react\"\n\nimport { AlexandriaContext } from \"./context\"\nimport { getSavedObject } from \"./storage\"\nimport { compileDefaultSettingsFromSchema } from \"./logic\"\n\nimport type { AlexandriaConfig, AlexandriaSchema } from \"./types\"\n\nconst defaultConfig: AlexandriaConfig = {\n\tkey: \"alexandria\",\n}\n\ninterface Props {\n\tschema: AlexandriaSchema\n\tconfig?: AlexandriaConfig\n\tchildren: React.ReactNode\n}\n\nexport const AlexandriaProvider = <TypedSettings extends {}>({\n\tschema,\n\tconfig: userConfig,\n\tchildren,\n}: Props) => {\n\tconst config: AlexandriaConfig = {\n\t\t...defaultConfig,\n\t\t...userConfig,\n\t}\n\n\t// const AlexandriaContext = createAlexandriaContext<TypedSettings>()\n\n\tconst defaultSettings =\n\t\tcompileDefaultSettingsFromSchema<TypedSettings>(schema)\n\n\tconst loadSettings = (): TypedSettings => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tconst [settings, setSettings] = useState<TypedSettings>(() => {\n\t\treturn {\n\t\t\t...defaultSettings,\n\t\t\t...loadSettings(),\n\t\t}\n\t})\n\n\treturn (\n\t\t<AlexandriaContext.Provider\n\t\t\tvalue={{\n\t\t\t\tsettings,\n\t\t\t\tsetSettings,\n\t\t\t\tschema,\n\t\t\t\tconfig,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AlexandriaContext.Provider>\n\t)\n}\n","import { Context, useContext, useEffect, useState } from \"react\"\n\nimport { AlexandriaContext } from \"./context\"\nimport { compileDefaultSettingsFromSchema, isAllowedValue } from \"./logic\"\nimport { getSavedObject, saveObject } from \"./storage\"\nimport { alexandriaError } from \"./errors\"\n\nimport {\n\tAlexandriaOperatingContext,\n\tAlexandriaSetting,\n\tTAlexandriaContext,\n} from \"./types\"\n\nexport const useAlexandria = <\n\tTypedSettings extends {}\n>(): AlexandriaOperatingContext<TypedSettings> & TypedSettings => {\n\tconst { settings, setSettings, schema, config } = useContext(\n\t\tAlexandriaContext as Context<TAlexandriaContext<TypedSettings>>\n\t)\n\tconst defaultSettings =\n\t\tcompileDefaultSettingsFromSchema<TypedSettings>(schema)\n\tconst knownSettings = Object.keys(\n\t\tdefaultSettings\n\t) as (keyof TypedSettings)[]\n\n\tconst [isServer, setIsServer] = useState(true)\n\n\tconst isKnownSetting = (key: keyof TypedSettings): boolean =>\n\t\tknownSettings.includes(key)\n\n\tconst validateSettings = (\n\t\tsettingsToValidate: TypedSettings\n\t): TypedSettings => {\n\t\tlet newSettings: Partial<TypedSettings> = {}\n\n\t\tfor (const [key, value] of Object.entries(settingsToValidate)) {\n\t\t\tconst known = isKnownSetting(key as keyof TypedSettings)\n\t\t\tconst allowed = isAllowedValue(\n\t\t\t\tkey,\n\t\t\t\tvalue as AlexandriaSetting,\n\t\t\t\tschema\n\t\t\t)\n\n\t\t\tif (known) {\n\t\t\t\tif (allowed) {\n\t\t\t\t\tnewSettings[key] = value as never\n\t\t\t\t} else {\n\t\t\t\t\tnewSettings[key] = schema[key].default\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\talexandriaError(\n\t\t\t\t\t\t\t\"invalidSettingValue\",\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tschema\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newSettings as TypedSettings\n\t}\n\n\tconst setWithValidation = (\n\t\tcb: (settings: TypedSettings) => TypedSettings\n\t) => {\n\t\tsetSettings(settings => validateSettings(cb(settings as TypedSettings)))\n\t}\n\n\tconst loadSettings = () => {\n\t\treturn getSavedObject(config.key, defaultSettings)\n\t}\n\n\tuseEffect(() => {\n\t\tif (!window.localStorage) return\n\n\t\tsetIsServer(false)\n\t\tconst savedSettings = loadSettings()\n\n\t\tif (Object.keys(savedSettings).length === 0) {\n\t\t\tsetSettings(defaultSettings)\n\t\t}\n\n\t\tsetSettings(validateSettings(savedSettings as TypedSettings))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tif (JSON.stringify(loadSettings()) !== JSON.stringify(settings)) {\n\t\t\tsaveObject(config.key, settings)\n\t\t}\n\t}, [settings])\n\n\t//////////\n\n\tconst throwIfUnknownSetting = (key: keyof TypedSettings) => {\n\t\tif (!isKnownSetting(key)) {\n\t\t\tthrow alexandriaError(\"unknownSetting\", key)\n\t\t}\n\t}\n\n\t//////////\n\n\tconst cycleBetween = (key: keyof TypedSettings, values: string[]) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\t// @ts-ignore\n\t\tconst index = values.indexOf(settings[key] as string)\n\t\tconst nextIndex = index === values.length - 1 ? 0 : index + 1\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: values[nextIndex],\n\t\t}))\n\t}\n\n\tconst reset = (key?: keyof TypedSettings) => {\n\t\tif (typeof key === \"undefined\") {\n\t\t\tsetSettings(_ => defaultSettings)\n\t\t\treturn\n\t\t}\n\n\t\tthrowIfUnknownSetting(key)\n\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: defaultSettings[key],\n\t\t}))\n\t}\n\n\tconst set = <Key extends keyof TypedSettings>(\n\t\tkey: Key,\n\t\tvalue: TypedSettings[Key]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\n\t\tif (settings[key] === value) return\n\t\tsetSettings(settings => validateSettings({ ...settings, [key]: value }))\n\t}\n\n\tconst toggle = (key: keyof TypedSettings) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t[key]: !settings[key],\n\t\t}))\n\t}\n\n\tconst toggleBetween = <Key extends keyof TypedSettings>(\n\t\tkey: Key,\n\t\tvalues: TypedSettings[Key][]\n\t) => {\n\t\tthrowIfUnknownSetting(key)\n\t\tsetWithValidation(settings => ({\n\t\t\t...settings,\n\t\t\t// @ts-ignore\n\t\t\t[key]: settings[key] === values[0] ? values[1] : values[0],\n\t\t}))\n\t}\n\n\tconst operatingContext: AlexandriaOperatingContext<TypedSettings> = {\n\t\tready: !isServer,\n\t\tcycleBetween,\n\t\treset,\n\t\tset,\n\t\ttoggle,\n\t\ttoggleBetween,\n\t}\n\n\tconst alexandria: AlexandriaOperatingContext<TypedSettings> &\n\t\tTypedSettings = {\n\t\t...settings,\n\t\t...operatingContext,\n\t}\n\n\treturn alexandria\n}\n","import React from \"react\"\n\nimport { AlexandriaProvider } from \"./AlexandriaProvider\"\nimport { useAlexandria } from \"./useAlexandria\"\n\nimport { AlexandriaConfig, AlexandriaSchema } from \"./types\"\n\nexport const createAlexandria = <TypedSettings extends {}>(\n\tschema: AlexandriaSchema,\n\tconfig?: AlexandriaConfig\n) => {\n\tconst Provider = ({ children }: { children: React.ReactNode }) => (\n\t\t<AlexandriaProvider<TypedSettings> schema={schema} config={config}>\n\t\t\t{children}\n\t\t</AlexandriaProvider>\n\t)\n\n\tconst useConsumer = () => {\n\t\treturn useAlexandria<TypedSettings>()\n\t}\n\n\treturn {\n\t\tProvider,\n\t\tuseConsumer,\n\t}\n}\n"],"names":["AlexandriaContext","createContext","isServer","window","saveObject","key","value","localStorage","setItem","JSON","stringify","e","getBlob","undefined","blob","getItem","getSavedObject","fallback","parse","PREFIX","errors","unknownSetting","invalidSettingValue","schema","allow","invalidSchema","emptySchema","alexandriaError","error","Error","args","isAllowedValue","setting","validate","valid","includes","compileDefaultSettingsFromSchema","settings","Object","keys","length","entries","defaultConfig","AlexandriaProvider","userConfig","config","children","defaultSettings","loadSettings","useState","setSettings","React","Provider","useAlexandria","useContext","knownSettings","setIsServer","isKnownSetting","validateSettings","settingsToValidate","newSettings","known","allowed","console","warn","setWithValidation","cb","useEffect","savedSettings","throwIfUnknownSetting","cycleBetween","values","index","indexOf","nextIndex","reset","_","set","toggle","toggleBetween","operatingContext","ready","alexandria","createAlexandria","useConsumer"],"mappings":"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"}